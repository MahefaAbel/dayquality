{"version":3,"sources":["serviceWorker.ts","Engine/Engine.ts","detail/detail.tsx","calendar/calendar.js","Routing/Router.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Engine","year","mounth","day","moduloted","this","getDiffsDate","anaranaAndro","getDateNameMalagasy","mounthInt","parseInt","dateWantedMoment","moment","dateReferenceFirstStr","getFirstDateReference","dateReferenceMoment","diff","result","keys","Object","AnaranandroMalagasy","length","modulo","values","DetailView","state","props","params","malagasyName","convertToMalagasyName","id","Component","CalendarView","date","Date","onChange","setState","history","push","getFullYear","getMonth","getDate","value","routing","StrictMode","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0FChBeC,E,mHAEiBC,EAAcC,EAAgBC,GAChE,IACMC,EADWC,KAAKC,aAAaL,EAAMC,EAAQC,GACpB,GACvBI,EAAeF,KAAKG,oBAAoBJ,GAE9C,MAAM,GAAN,OAAUG,K,mCAGeN,EAAcC,EAAgBC,GACrD,IAAMM,EAAYC,SAAS,GAAD,OAAIR,IAAY,EACtCS,EAAmBC,IAAO,GAAD,OAAIT,EAAJ,YAAWM,EAAX,YAAwBR,GAAO,YAExDY,EAAwBR,KAAKS,wBAC7BC,EAAsBH,IAAO,GAAD,OAAIC,GAAwB,YAI9D,OAFiBF,EAAiBK,KAAKD,EAAqB,U,8CAM5D,IAAIE,EAAS,KACPC,EAAOC,OAAOD,KAAKE,GAIzB,OAHGF,EAAKG,OAAS,IACbJ,EAASC,EAAK,IAEXD,I,0CAGyBK,GAChC,IAAIL,EAAS,KACPM,EAASJ,OAAOI,OAAOH,GAI7B,OAHGG,EAAOF,OAAS,IACfJ,EAASM,EAAOD,IAEbL,M,KAKLG,EAAsB,CACxB,aAAc,cACd,aAAc,UACd,aAAc,WACd,aAAc,WACd,aAAc,aACd,aAAc,cACd,aAAc,WACd,aAAc,cACd,aAAc,cACd,aAAc,eACd,aAAc,WACd,aAAc,QACd,aAAc,gBACd,aAAc,aACd,aAAc,SACd,aAAc,SACd,aAAc,eACd,aAAc,SACd,aAAc,SACd,aAAc,UACd,aAAc,YACd,aAAc,WACd,aAAc,SACd,aAAc,YACd,aAAc,WACd,aAAc,SACd,aAAc,YACd,aAAc,eCpEGI,E,4MACnBC,MAAQ,G,uDAIN,IAAMxB,EAAOI,KAAKqB,MAAM3B,MAAM4B,OAAO1B,KAC/BC,EAASG,KAAKqB,MAAM3B,MAAM4B,OAAOzB,OACjCC,EAAME,KAAKqB,MAAM3B,MAAM4B,OAAOxB,IAE9ByB,EAAe5B,EAAO6B,sBAAsB5B,EAAMC,EAAQC,GAEhE,OACE,yBAAK2B,GAAG,aACN,6BACE,kDAAoBzB,KAAKqB,MAAM3B,MAAM4B,OAAO1B,KAA5C,YAAoDI,KAAKqB,MAAM3B,MAAM4B,OAAOzB,OAA5E,YAAsFG,KAAKqB,MAAM3B,MAAM4B,OAAOxB,MAC9G,6BACE,0BAAM2B,GAAG,eAAT,oBAAqCF,W,GAhBTG,a,QCCnBC,G,wNAEnBP,MAAQ,CACNQ,KAAM,IAAIC,M,EAGZC,SAAW,SAAAF,GACT,EAAKG,SAAS,CAAEH,SAEhB,EAAKP,MAAMW,QAAQC,KAAnB,kBAAmCL,EAAKM,cAAxC,YAAyDN,EAAKO,WAA9D,YAA4EP,EAAKQ,a,uDAIjF,OACE,yBAAKX,GAAG,qBACN,yBAAKA,GAAG,0BACN,kBAAC,IAAD,CACEK,SAAU9B,KAAK8B,SACfO,MAAOrC,KAAKoB,MAAMQ,a,GAlBYF,cCW3BY,EAVb,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWd,IAC3B,kBAAC,IAAD,CAAOa,KAAK,6BAA6BC,UAAWtB,OCL5DuB,IAASC,OACPL,EACAM,SAASC,eAAe,SLoIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.612cdfc0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import moment from \"moment\"\r\n\r\nexport default class Engine {\r\n\r\n  public static convertToMalagasyName(year: number, mounth: number, day: number) {\r\n    const diffDays = this.getDiffsDate(year, mounth, day);\r\n    const moduloted = diffDays % 28\r\n    const anaranaAndro = this.getDateNameMalagasy(moduloted)\r\n    // return `${diffDays} ${moduloted} ${anaranaAndro}`\r\n    return `${anaranaAndro}`\r\n  }\r\n\r\n  public static getDiffsDate(year: number, mounth: number, day: number) {\r\n      const mounthInt = parseInt(`${mounth}`) + 1   // On ajout 1 car mounth est [0 -> 11]\r\n    const dateWantedMoment = moment(`${day}/${mounthInt}/${year}`,'D/M/YYYY');\r\n\r\n    const dateReferenceFirstStr = this.getFirstDateReference()  // Exemple : 2019-07-22\r\n    const dateReferenceMoment = moment(`${dateReferenceFirstStr}`,'YYYY-M-D');\r\n    \r\n    const diffDays = dateWantedMoment.diff(dateReferenceMoment, 'days');\r\n\r\n    return diffDays\r\n  }\r\n\r\n  public static getFirstDateReference() {\r\n    let result = null;\r\n    const keys = Object.keys(AnaranandroMalagasy)\r\n    if(keys.length > 0){\r\n        result = keys[0]\r\n    }\r\n    return result\r\n  }\r\n\r\n  public static getDateNameMalagasy(modulo: number) {\r\n    let result = null;\r\n    const values = Object.values(AnaranandroMalagasy)\r\n    if(values.length > 0){\r\n        result = values[modulo]\r\n    }\r\n    return result\r\n  }\r\n\r\n}\r\n\r\nconst AnaranandroMalagasy = {\r\n    \"2019-07-22\": \"Lohalakaosy\",\r\n    \"2019-07-23\": \"Tsidina\",\r\n    \"2019-07-24\": \"Ranomaso\",\r\n    \"2019-07-25\": \"Tratrany\",\r\n    \"2019-07-26\": \"Sandramody\",\r\n    \"2019-07-27\": \"Adalomanara\",\r\n    \"2019-07-28\": \"Faradalo\",\r\n    \"2019-07-29\": \"Lohalohotsy\",\r\n    \"2019-07-30\": \"Faralohotsy\",\r\n    \"2019-07-31\": \"Vavalamadina\",\r\n    \"2019-08-01\": \"Handrona\",\r\n    \"2019-08-02\": \"Soria\",\r\n    \"2019-08-03\": \"Adaorovokatra\",\r\n    \"2019-08-04\": \"Faralahaka\",\r\n    \"2019-08-05\": \"Ravina\",\r\n    \"2019-08-06\": \"Vahany\",\r\n    \"2019-08-07\": \"Vavasorotany\",\r\n    \"2019-08-08\": \"Kokony\",\r\n    \"2019-08-09\": \"Hifiny\",\r\n    \"2019-08-10\": \"Alasata\",\r\n    \"2019-08-11\": \"Haravoana\",\r\n    \"2019-08-12\": \"Soambola\",\r\n    \"2019-08-13\": \"Alaova\",\r\n    \"2019-08-14\": \"Alakaforo\",\r\n    \"2019-08-15\": \"Admizana\",\r\n    \"2019-08-16\": \"Kididy\",\r\n    \"2019-08-17\": \"Alakarabo\",\r\n    \"2019-08-18\": \"Fanagnorena\"\r\n}","import React, { Component } from 'react';\r\nimport './style.css';\r\nimport Engine from '../Engine/Engine';\r\n\r\nexport default class DetailView extends Component<Props, State> {\r\n  state = {\r\n  }\r\n \r\n  public render() {\r\n    const year = this.props.match.params.year;\r\n    const mounth = this.props.match.params.mounth;\r\n    const day = this.props.match.params.day;\r\n\r\n    const malagasyName = Engine.convertToMalagasyName(year, mounth, day);\r\n\r\n    return (\r\n      <div id=\"container\">\r\n        <div>\r\n          <h2>{`Detail pour ${this.props.match.params.year}-${this.props.match.params.mounth}-${this.props.match.params.day}`}</h2>\r\n          <div>\r\n            <span id=\"detail-name\">{`Anarana : ${malagasyName}`}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const months = {\r\n//   0: 'January',\r\n//   1: 'February',\r\n//   2: 'March',\r\n//   3: 'April',\r\n//   4: 'May',\r\n//   5: 'June',\r\n//   6: 'July',\r\n//   7: 'August',\r\n//   8: 'September',\r\n//   9: 'October',\r\n//   10: 'November',\r\n//   11: 'December'\r\n// }\r\n\r\n\r\ntype State = {\r\n\r\n}\r\ntype Props = {\r\n  match: any,\r\n}","import React, { Component } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './style.css';\r\n \r\nexport default class CalendarView extends Component {\r\n  \r\n  state = {\r\n    date: new Date(),\r\n  }\r\n \r\n  onChange = date => {\r\n    this.setState({ date });\r\n    // console.log(\"onChange\", date, date.getFullYear(), date.getMonth(), date.getDate());\r\n    this.props.history.push(`/detail/${date.getFullYear()}/${date.getMonth()}/${date.getDate()}`);\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <div id=\"calendarContainer\">\r\n        <div id=\"calendarWidthContainer\">\r\n          <Calendar\r\n            onChange={this.onChange}\r\n            value={this.state.date}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react'\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\r\nimport DetailView from '../detail/detail'\r\nimport CalendarView from '../calendar/calendar'\r\n\r\nconst routing = (\r\n  <React.StrictMode>\r\n    <Router>\r\n      <div>\r\n        <Route path=\"/\" component={CalendarView} />\r\n        <Route path=\"/detail/:year/:mounth/:day\" component={DetailView} />\r\n      </div>\r\n    </Router>\r\n  </React.StrictMode>\r\n)\r\n\r\nexport default routing;","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport routing from './Routing/Router'\r\n\r\nReactDOM.render(\r\n  routing,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}